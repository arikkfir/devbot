# syntax=docker/dockerfile:1

FROM alpine:3.19 AS kustomize
ARG KUSTOMIZE_VERSION="v5.3.0"
WORKDIR /workspace
RUN apk --no-cache add curl
RUN curl -sSL "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2F${KUSTOMIZE_VERSION}/kustomize_${KUSTOMIZE_VERSION}_linux_amd64.tar.gz" | tar xzf -

FROM alpine:3.19 AS yq
ARG YQ_VERSION="v4.40.7"
WORKDIR /workspace
RUN apk --no-cache add curl
RUN curl -sSL -o yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" && chmod +x yq

FROM golang:1.22.3 AS builder

# Compiler arguments
ARG SKAFFOLD_GO_GCFLAGS=""
ARG TARGETOS="linux"
ARG TARGETARCH

# Application variables
ARG VERSION

WORKDIR /workspace
COPY go.mod go.mod
COPY go.sum go.sum
RUN --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/go/pkg/mod go mod download

COPY api api/
COPY cmd/deployment-bake/main.go cmd/deployment-bake/
COPY internal/util/lang/uniq.go internal/util/lang/
COPY internal/util/observability/logging_hook.go internal/util/observability/
COPY internal/util/observability/otel_hook.go internal/util/observability/
COPY internal/util/observability/zerolog_logr_adapter.go internal/util/observability/
COPY internal/util/strings/slug.go internal/util/strings/
COPY internal/util/version/version.go internal/util/version/
RUN --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/go/pkg/mod \
    CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} \
    go build \
      -gcflags="${SKAFFOLD_GO_GCFLAGS}" \
      -ldflags "-X github.com/arikkfir/devbot/internal/util/version.Version=${VERSION}" \
      -o deployment-bake \
      cmd/deployment-bake/main.go

FROM gcr.io/distroless/static:nonroot
WORKDIR /
COPY --from=builder /workspace/deployment-bake /usr/local/bin/
COPY --from=kustomize /workspace/kustomize /usr/local/bin/
COPY --from=yq /workspace/yq /usr/local/bin/
USER 65532:65532
ENV GOTRACEBACK=single
ENTRYPOINT ["/usr/local/bin/deployment-bake"]
