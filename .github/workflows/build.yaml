name: Build

on:
  push:
    branches: [main]
    tags:
      - v[0-9]+.[0-9]+.[0-9]+**
  pull_request:
    types: [ opened, reopened, synchronize ]

defaults:
  run:
    shell: bash --noprofile --norc -e -u -x -o pipefail {0}

jobs:

  metadata:
    runs-on: ubuntu-latest
    outputs:
      dockerTag: ${{ fromJSON(steps.metadata.outputs.result).dockerTag }}
      version: ${{ fromJSON(steps.metadata.outputs.result).version }}
    steps:
      - uses: actions/github-script@v7
        id: metadata
        with:
          script: |
            const ref = context["ref"].replace("refs/tags/", ""), sha = context["sha"]
            if (context["eventName"] === "push" && /^v\d+\.\d+\.\d+/.test(ref)) {
                return { dockerTag: ref, version: `${ref}+${sha}` }
            } else {
                return { dockerTag: sha, version: `v0.0.0+${sha}` }
            }

  build-images:
    runs-on: ubuntu-latest
    needs: [metadata]
    strategy:
      fail-fast: true
      matrix:
        image: [ apply-job, bake-job, clone-job, controller, webhooks ]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          build-args: |
            APPLY_JOB=ghcr.io/arikkfir/devbot/apply-job:${{ needs.metadata.outputs.dockerTag }}
            BAKE_JOB=ghcr.io/arikkfir/devbot/bake-job:${{ needs.metadata.outputs.dockerTag }}
            CLONE_JOB=ghcr.io/arikkfir/devbot/clone-job:${{ needs.metadata.outputs.dockerTag }}
            VERSION=${{ needs.metadata.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          file: build/Dockerfile.${{ matrix.image }}
          platforms: linux/amd64
          push: true
          tags: ghcr.io/arikkfir/devbot/${{ matrix.image }}:${{ needs.metadata.outputs.dockerTag }}

  build-helm-chart:
    runs-on: ubuntu-latest
    needs: [metadata]
    env:
      TAG: ${{ needs.metadata.outputs.dockerTag }}
      VERSION: ${{ needs.metadata.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: azure/setup-helm@v4
        with:
          version: v3.15.2
      - run: echo -n ${{ secrets.GITHUB_TOKEN }} | helm registry login ghcr.io --username ${{ github.actor }} --password-stdin
      - run: yq -i ".commitSHA=\"${TAG}\" | .controller.image.tag=\"${TAG}\" | .webhooks.image.tag=\"${TAG}\"" deploy/chart/values.yaml
      - run: helm lint deploy/chart/
      - run: helm package --version ${VERSION} --app-version ${VERSION} deploy/chart/ --destination ./
      - run: helm push devbot-${VERSION}.tgz oci://ghcr.io/${GITHUB_ACTOR}

  e2e:
    runs-on: ubuntu-latest
    needs: [metadata, build-images, build-helm-chart]
    env:
      TAG: ${{ needs.metadata.outputs.dockerTag }}
      VERSION: ${{ needs.metadata.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - run: go mod download -x
      - run: go install github.com/onsi/ginkgo/v2/ginkgo
      - uses: helm/kind-action@v1
        with:
          cluster_name: devbot
          version: v0.23.0
      - uses: azure/setup-helm@v4
        with:
          version: v3.15.2
      - run: echo -n ${GITHUB_TOKEN} | helm registry login ghcr.io --username ${{ github.actor }} --password-stdin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: make setup-observability
      - run: |
          helm install local-devbot oci://ghcr.io/arikkfir/devbot --version ${VERSION} \
            --create-namespace --namespace devbot \
            --values build/ci/devbot-values.yaml
      - run: make e2e
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
