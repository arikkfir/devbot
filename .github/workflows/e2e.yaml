name: End-to-end Tests

on:
  workflow_call:
    inputs:
      devctl-artifact-id:
        description: The ID of the artifact containing "devctl" binary for Linux/amd64.
        required: true
        type: string
    secrets:
      GROUNDCOVER_API_KEY:
        description: Groundcover API key used for connecting to the GroundCover portal.
        required: true
      PAT:
        description: The GitHub PAT to be passed to "devctl".
        required: true

defaults:
  run:
    shell: bash --noprofile --norc -e -u -x -o pipefail {0}

env:
  TEST_REPO_OWNER: devbot-testing
  TEST_REPO_NAME: e2e-${{ github.run_number }}-${{ github.run_attempt }}

jobs:

  e2e:
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: kind-pr-${{ github.event.pull_request.number }}-${{ github.run_number }}-${{ github.run_attempt }}
    steps:
      - run: |
          gh api \
            -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${REPO}/issues/${ISSUE} \
            --jq '.labels | "JUSTEST_SLOW_FACTOR=" + (any(.name == "slowdown-tests") | if . then "10" else "1" end)' >> $GITHUB_ENV
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.PAT }}
          ISSUE: "${{ github.event.pull_request.number }}"
          REPO: "${{ github.repository }}"
      - run: |
          gh api \
            -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${REPO}/issues/${ISSUE} \
            --jq '.labels | "DEPLOY_GROUNDCOVER=" + (any(.name == "deploy-groundcover") | tostring)' >> $GITHUB_OUTPUT
        if: github.event_name == 'pull_request'
        id: deploy-groundcover
        env:
          GH_TOKEN: ${{ secrets.PAT }}
          ISSUE: "${{ github.event.pull_request.number }}"
          REPO: "${{ github.repository }}"
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          cache-dependency-path: backend/go.sum
          go-version-file: backend/go.mod
      - run: go mod download -x
        working-directory: backend
      - uses: helm/kind-action@v1
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          version: v0.23.0
      - run: |
          helm repo add groundcover https://helm.groundcover.com
          helm repo update groundcover
          helm install groundcover groundcover/groundcover \
            --create-namespace \
            --namespace groundcover \
            --set global.groundcover_token=${GROUNDCOVER_API_KEY},clusterId=${CLUSTER_NAME}
          kubectl wait pod --all --for=condition=Ready --namespace=groundcover --timeout=5m
        if: steps.deploy-groundcover.outputs.DEPLOY_GROUNDCOVER == 'true'
        env:
          GROUNDCOVER_API_KEY: ${{ secrets.GROUNDCOVER_API_KEY }}
      - run: |
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${REPO}/actions/artifacts/${DEVCTL_ARTIFACT_ID}/zip" \
            > devctl.zip
        env:
          DEVCTL_ARTIFACT_ID: ${{ inputs.devctl-artifact-id }}
          GH_TOKEN: ${{ github.token }}
          REPO: "${{ github.repository }}"
      - run: unzip devctl.zip && chmod +x devctl-linux-amd64 && mv devctl-linux-amd64 devctl
      - run: |
          ./devctl bootstrap github \
            --owner=${TEST_REPO_OWNER} \
            --name=${TEST_REPO_NAME} \
            --personal-access-token=${PAT_TOKEN}
        id: install
        env:
          PAT_TOKEN: ${{ secrets.PAT }}
      - run: go test ./e2e -run TestRepositoryRefreshIntervalParsing
        id: test
        working-directory: backend
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
      - run: |
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            --method DELETE \
            "/repos/${TEST_REPO_OWNER}/${TEST_REPO_NAME}"
        if: always() && (steps.install.conclusion == 'success' || steps.install.conclusion == 'failure')
        env:
          GH_TOKEN: ${{ secrets.PAT }}
