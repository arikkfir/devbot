//go:build !ignore_autogenerated

// Code generated by devbot script. DO NOT EDIT.

package {{$.PackageName}}

import (
	. "github.com/arikkfir/devbot/internal/util/k8s"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

func (s *{{$.ObjectType}}Status) GetCondition(conditionType string) *v1.Condition {
	return GetCondition(s.Conditions, conditionType)
}

{{- range $ci, $c := .Conditions}}

{{- range $ri, $r := $c.Reasons}}

func (s *{{$.ObjectType}}Status) Set{{$c.Name}}DueTo{{$r}}(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[{{$c.RemovalVerb}}]; !ok || v != "No: " + {{$r}} {
		s.PrivateArea[{{$c.RemovalVerb}}] = "No: " + {{$r}}
		changed = true
	}
	changed = SetCondition(&s.Conditions, {{$c.Name}}, v1.ConditionTrue, {{$r}}, message, args...) || changed
	return changed
}

func (s *{{$.ObjectType}}Status) SetMaybe{{$c.Name}}DueTo{{$r}}(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[{{$c.RemovalVerb}}]; !ok || v != "No: " + {{$r}} {
		s.PrivateArea[{{$c.RemovalVerb}}] = "No: " + {{$r}}
		changed = true
	}
	changed = SetCondition(&s.Conditions, {{$c.Name}}, v1.ConditionUnknown, {{$r}}, message, args...) || changed
	return changed
}
{{end}}

func (s *{{$.ObjectType}}Status) Set{{$c.RemovalVerb}}If{{$c.Name}}DueToAnyOf(reasons ...string) bool {
	changed := false
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, {{$c.Name}}, reasons...) || changed
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if s.Is{{$c.RemovalVerb}}() {
		if v, ok := s.PrivateArea[{{$c.RemovalVerb}}]; !ok || v != "Yes" {
			s.PrivateArea[{{$c.RemovalVerb}}] = "Yes"
			changed = true
		}
	} else {
		if v, ok := s.PrivateArea[{{$c.RemovalVerb}}]; !ok || v != "No: " + s.Get{{$c.Name}}Reason() {
			s.PrivateArea[{{$c.RemovalVerb}}] = "No: " + s.Get{{$c.Name}}Reason()
			changed = true
		}
	}
	return changed
}

func (s *{{$.ObjectType}}Status) Set{{$c.RemovalVerb}}() bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[{{$c.RemovalVerb}}]; !ok || v != "Yes" {
		s.PrivateArea[{{$c.RemovalVerb}}] = "Yes"
		changed = true
	}
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, {{$c.Name}}, {{range $ri, $r := $c.Reasons}}{{$r}}, {{end}}"NonExistent") || changed
	return changed
}

func (s *{{$.ObjectType}}Status) Is{{$c.RemovalVerb}}() bool {
	return !HasCondition(s.Conditions, {{$c.Name}}) || IsConditionStatusOneOf(s.Conditions, {{$c.Name}}, v1.ConditionFalse)
}

func (s *{{$.ObjectType}}Status) Is{{$c.Name}}() bool {
	return IsConditionStatusOneOf(s.Conditions, {{$c.Name}}, v1.ConditionTrue, v1.ConditionUnknown)
}

func (s *{{$.ObjectType}}Status) Get{{$c.Name}}Condition() *v1.Condition {
	return GetCondition(s.Conditions, {{$c.Name}})
}

func (s *{{$.ObjectType}}Status) Get{{$c.Name}}Reason() string {
	return GetConditionReason(s.Conditions, {{$c.Name}})
}

func (s *{{$.ObjectType}}Status) Get{{$c.Name}}Status() *v1.ConditionStatus {
	return GetConditionStatus(s.Conditions, {{$c.Name}})
}

func (s *{{$.ObjectType}}Status) Get{{$c.Name}}Message() string {
	return GetConditionMessage(s.Conditions, {{$c.Name}})
}
{{- end}}

func (s *{{$.ObjectType}}Status) GetConditions() []v1.Condition {
    return s.Conditions
}

func (s *{{$.ObjectType}}Status) SetGenerationAndTransitionTime(generation int64) {
	SetConditionsGenerationAndTransitionTime(s.Conditions, generation)
}

func (s *{{$.ObjectType}}Status) ClearStaleConditions(currentGeneration int64) {
	ClearStaleConditions(&s.Conditions, currentGeneration)
}
