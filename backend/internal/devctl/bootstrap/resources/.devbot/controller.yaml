apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: controller
rules:

  # Controller reads its own pod information to infer its own container image name - to use it for the deployment jobs
  - apiGroups: [ "" ]
    resources: [ "pods" ]
    verbs: [ "get" ]

  # Application CRD reconciliation
  - apiGroups: [ devbot.kfirs.com ]
    resources: [ applications ]
    verbs: [ get, list, patch, update, watch ]
  - apiGroups: [ devbot.kfirs.com ]
    resources: [ applications/status ]
    verbs: [ create, delete, get, patch, update ]

  # Environment CRD reconciliation
  - apiGroups: [ devbot.kfirs.com ]
    resources: [ environments ]
    verbs: [ create, delete, get, list, patch, update, watch ]
  - apiGroups: [ devbot.kfirs.com ]
    resources: [ environments/status ]
    verbs: [ create, delete, get, patch, update ]

  # Deployment CRD reconciliation
  - apiGroups: [ devbot.kfirs.com ]
    resources: [ deployments ]
    verbs: [ create, delete, get, list, patch, update, watch ]
  - apiGroups: [ devbot.kfirs.com ]
    resources: [ deployments/status ]
    verbs: [ create, delete, get, patch, update ]
  - apiGroups: [ "batch" ]
    resources: [ "jobs" ]
    verbs: [ create, delete, get, list, patch, update, watch ]
  - apiGroups: [ "" ]
    resources: [ persistentvolumeclaims ]
    verbs: [ create, delete, get, list, patch, update, watch ]

  # Repository CRD reconciliation
  - apiGroups: [ devbot.kfirs.com ]
    resources: [ repositories ]
    verbs: [ get, list, patch, update, watch ]
  - apiGroups: [ devbot.kfirs.com ]
    resources: [ repositories/status ]
    verbs: [ create, delete, get, patch, update ]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    iam.gke.io/gcp-service-account: application-controller@arikkfir.iam.gserviceaccount.com
  labels:
    app.kubernetes.io/component: controller
  name: controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: controller
  name: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: controller
subjects:
  - kind: ServiceAccount
    name: controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: controller
  name: controller-leader-election
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: leader-election
subjects:
  - kind: ServiceAccount
    name: controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: controller
  name: controller
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller
    spec:
      containers:
        - image: ghcr.io/arikkfir/devbot/controller
          args:
            - "--leader-elect"
          env: [ ]
          name: controller
          ports:
            - containerPort: 8000
              name: metrics
            - containerPort: 9000
              name: health
          resources:
            limits:
              cpu: 2048m
              memory: 128Mi
            requests:
              cpu: 512m
              memory: 64Mi
          livenessProbe:
            httpGet:
              port: health
              path: /healthz
            failureThreshold: 3
            periodSeconds: 5
            terminationGracePeriodSeconds: 30
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              port: health
              path: /healthz
            failureThreshold: 3
            periodSeconds: 1
            timeoutSeconds: 1
          startupProbe:
            httpGet:
              port: health
              path: /healthz
            failureThreshold: 3
            periodSeconds: 1
            timeoutSeconds: 1
      enableServiceLinks: false
      serviceAccountName: controller
