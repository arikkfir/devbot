//go:build !ignore_autogenerated

// Code generated by devbot script. DO NOT EDIT.

package v1

import (
	"fmt"

	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"slices"
)

func (s *ObjectWithCommonConditionsStatus) GetCondition(conditionType string) *v1.Condition {
	for _, c := range s.Conditions {
		if c.Type == conditionType {
			lc := c
			return &lc
		}
	}
	return nil
}

func (s *ObjectWithCommonConditionsStatus) SetUncontrolledDueToControllerCannotBeFetched(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Uncontrolled {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != ControllerCannotBeFetched || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = ControllerCannotBeFetched
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Uncontrolled,
		Status:  v1.ConditionTrue,
		Reason:  ControllerCannotBeFetched,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetMaybeUncontrolledDueToControllerCannotBeFetched(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Uncontrolled {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != ControllerCannotBeFetched || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = ControllerCannotBeFetched
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Uncontrolled,
		Status:  v1.ConditionUnknown,
		Reason:  ControllerCannotBeFetched,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetUncontrolledDueToControllerNotAccessible(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Uncontrolled {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != ControllerNotAccessible || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = ControllerNotAccessible
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Uncontrolled,
		Status:  v1.ConditionTrue,
		Reason:  ControllerNotAccessible,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetMaybeUncontrolledDueToControllerNotAccessible(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Uncontrolled {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != ControllerNotAccessible || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = ControllerNotAccessible
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Uncontrolled,
		Status:  v1.ConditionUnknown,
		Reason:  ControllerNotAccessible,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetUncontrolledDueToControllerNotFound(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Uncontrolled {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != ControllerNotFound || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = ControllerNotFound
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Uncontrolled,
		Status:  v1.ConditionTrue,
		Reason:  ControllerNotFound,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetMaybeUncontrolledDueToControllerNotFound(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Uncontrolled {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != ControllerNotFound || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = ControllerNotFound
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Uncontrolled,
		Status:  v1.ConditionUnknown,
		Reason:  ControllerNotFound,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetUncontrolledDueToOwnerReferenceMissing(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Uncontrolled {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != OwnerReferenceMissing || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = OwnerReferenceMissing
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Uncontrolled,
		Status:  v1.ConditionTrue,
		Reason:  OwnerReferenceMissing,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetMaybeUncontrolledDueToOwnerReferenceMissing(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Uncontrolled {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != OwnerReferenceMissing || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = OwnerReferenceMissing
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Uncontrolled,
		Status:  v1.ConditionUnknown,
		Reason:  OwnerReferenceMissing,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetControlledIfUncontrolledDueToAnyOf(reasons ...string) bool {
	changed := false
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Uncontrolled || !slices.Contains(reasons, c.Reason) {
			newConditions = append(newConditions, c)
		} else {
			changed = true
		}
	}
	if changed {
		s.Conditions = newConditions
	}
	return changed
}

func (s *ObjectWithCommonConditionsStatus) SetControlled() {
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Uncontrolled {
			newConditions = append(newConditions, c)
		}
	}
	s.Conditions = newConditions
}

func (s *ObjectWithCommonConditionsStatus) IsControlled() bool {
	for _, c := range s.Conditions {
		if c.Type == Uncontrolled {
			return c.Status == v1.ConditionFalse
		}
	}
	return true
}

func (s *ObjectWithCommonConditionsStatus) IsUncontrolled() bool {
	for _, c := range s.Conditions {
		if c.Type == Uncontrolled {
			return c.Status == v1.ConditionTrue || c.Status == v1.ConditionUnknown
		}
	}
	return false
}

func (s *ObjectWithCommonConditionsStatus) GetUncontrolledCondition() *v1.Condition {
	for _, c := range s.Conditions {
		if c.Type == Uncontrolled {
			lc := c
			return &lc
		}
	}
	return nil
}

func (s *ObjectWithCommonConditionsStatus) GetUncontrolledReason() string {
	for _, c := range s.Conditions {
		if c.Type == Uncontrolled {
			return c.Reason
		}
	}
	return ""
}

func (s *ObjectWithCommonConditionsStatus) GetUncontrolledStatus() *v1.ConditionStatus {
	for _, c := range s.Conditions {
		if c.Type == Uncontrolled {
			status := c.Status
			return &status
		}
	}
	return nil
}

func (s *ObjectWithCommonConditionsStatus) GetUncontrolledMessage() string {
	for _, c := range s.Conditions {
		if c.Type == Uncontrolled {
			return c.Message
		}
	}
	return ""
}

func (s *ObjectWithCommonConditionsStatus) SetFinalizingDueToFinalizationFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != FinalizationFailed || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = FinalizationFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionTrue,
		Reason:  FinalizationFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetMaybeFinalizingDueToFinalizationFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != FinalizationFailed || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = FinalizationFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionUnknown,
		Reason:  FinalizationFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetFinalizingDueToFinalizerRemovalFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != FinalizerRemovalFailed || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = FinalizerRemovalFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionTrue,
		Reason:  FinalizerRemovalFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetMaybeFinalizingDueToFinalizerRemovalFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != FinalizerRemovalFailed || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = FinalizerRemovalFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionUnknown,
		Reason:  FinalizerRemovalFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetFinalizingDueToInProgress(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != InProgress || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = InProgress
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionTrue,
		Reason:  InProgress,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetMaybeFinalizingDueToInProgress(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != InProgress || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = InProgress
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionUnknown,
		Reason:  InProgress,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetFinalizedIfFinalizingDueToAnyOf(reasons ...string) bool {
	changed := false
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Finalizing || !slices.Contains(reasons, c.Reason) {
			newConditions = append(newConditions, c)
		} else {
			changed = true
		}
	}
	if changed {
		s.Conditions = newConditions
	}
	return changed
}

func (s *ObjectWithCommonConditionsStatus) SetFinalized() {
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Finalizing {
			newConditions = append(newConditions, c)
		}
	}
	s.Conditions = newConditions
}

func (s *ObjectWithCommonConditionsStatus) IsFinalized() bool {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			return c.Status == v1.ConditionFalse
		}
	}
	return true
}

func (s *ObjectWithCommonConditionsStatus) IsFinalizing() bool {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			return c.Status == v1.ConditionTrue || c.Status == v1.ConditionUnknown
		}
	}
	return false
}

func (s *ObjectWithCommonConditionsStatus) GetFinalizingCondition() *v1.Condition {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			lc := c
			return &lc
		}
	}
	return nil
}

func (s *ObjectWithCommonConditionsStatus) GetFinalizingReason() string {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			return c.Reason
		}
	}
	return ""
}

func (s *ObjectWithCommonConditionsStatus) GetFinalizingStatus() *v1.ConditionStatus {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			status := c.Status
			return &status
		}
	}
	return nil
}

func (s *ObjectWithCommonConditionsStatus) GetFinalizingMessage() string {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			return c.Message
		}
	}
	return ""
}

func (s *ObjectWithCommonConditionsStatus) SetFailedToInitializeDueToInternalError(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != InternalError || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = InternalError
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    FailedToInitialize,
		Status:  v1.ConditionTrue,
		Reason:  InternalError,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetMaybeFailedToInitializeDueToInternalError(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != InternalError || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = InternalError
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    FailedToInitialize,
		Status:  v1.ConditionUnknown,
		Reason:  InternalError,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *ObjectWithCommonConditionsStatus) SetInitializedIfFailedToInitializeDueToAnyOf(reasons ...string) bool {
	changed := false
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != FailedToInitialize || !slices.Contains(reasons, c.Reason) {
			newConditions = append(newConditions, c)
		} else {
			changed = true
		}
	}
	if changed {
		s.Conditions = newConditions
	}
	return changed
}

func (s *ObjectWithCommonConditionsStatus) SetInitialized() {
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != FailedToInitialize {
			newConditions = append(newConditions, c)
		}
	}
	s.Conditions = newConditions
}

func (s *ObjectWithCommonConditionsStatus) IsInitialized() bool {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			return c.Status == v1.ConditionFalse
		}
	}
	return true
}

func (s *ObjectWithCommonConditionsStatus) IsFailedToInitialize() bool {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			return c.Status == v1.ConditionTrue || c.Status == v1.ConditionUnknown
		}
	}
	return false
}

func (s *ObjectWithCommonConditionsStatus) GetFailedToInitializeCondition() *v1.Condition {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			lc := c
			return &lc
		}
	}
	return nil
}

func (s *ObjectWithCommonConditionsStatus) GetFailedToInitializeReason() string {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			return c.Reason
		}
	}
	return ""
}

func (s *ObjectWithCommonConditionsStatus) GetFailedToInitializeStatus() *v1.ConditionStatus {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			status := c.Status
			return &status
		}
	}
	return nil
}

func (s *ObjectWithCommonConditionsStatus) GetFailedToInitializeMessage() string {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			return c.Message
		}
	}
	return ""
}

func (s *ObjectWithCommonConditionsStatus) GetConditions() []v1.Condition {
	return s.Conditions
}

func (s *ObjectWithCommonConditionsStatus) SetConditions(conditions []v1.Condition) {
	s.Conditions = conditions
}

func (s *ObjectWithCommonConditionsStatus) ClearStaleConditions(currentGeneration int64) {
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.ObservedGeneration >= currentGeneration {
			newConditions = append(newConditions, c)
		}
	}
	s.Conditions = newConditions
}
