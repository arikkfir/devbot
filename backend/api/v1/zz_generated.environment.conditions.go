//go:build !ignore_autogenerated

// Code generated by devbot script. DO NOT EDIT.

package v1

import (
	"fmt"

	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"slices"
)

func (s *EnvironmentStatus) SetStaleDueToDeploymentBranchOutOfSync(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != DeploymentBranchOutOfSync || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = DeploymentBranchOutOfSync
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionTrue,
		Reason:  DeploymentBranchOutOfSync,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetMaybeStaleDueToDeploymentBranchOutOfSync(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != DeploymentBranchOutOfSync || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = DeploymentBranchOutOfSync
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionUnknown,
		Reason:  DeploymentBranchOutOfSync,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetStaleDueToInternalError(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != InternalError || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = InternalError
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionTrue,
		Reason:  InternalError,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetMaybeStaleDueToInternalError(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != InternalError || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = InternalError
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionUnknown,
		Reason:  InternalError,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetStaleDueToRepositoryNotAccessible(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != RepositoryNotAccessible || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = RepositoryNotAccessible
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionTrue,
		Reason:  RepositoryNotAccessible,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetMaybeStaleDueToRepositoryNotAccessible(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != RepositoryNotAccessible || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = RepositoryNotAccessible
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionUnknown,
		Reason:  RepositoryNotAccessible,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetStaleDueToRepositoryNotFound(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != RepositoryNotFound || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = RepositoryNotFound
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionTrue,
		Reason:  RepositoryNotFound,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetMaybeStaleDueToRepositoryNotFound(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != RepositoryNotFound || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = RepositoryNotFound
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionUnknown,
		Reason:  RepositoryNotFound,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetStaleDueToRepositoryNotReady(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != RepositoryNotReady || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = RepositoryNotReady
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionTrue,
		Reason:  RepositoryNotReady,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetMaybeStaleDueToRepositoryNotReady(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != RepositoryNotReady || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = RepositoryNotReady
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionUnknown,
		Reason:  RepositoryNotReady,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetStaleDueToRepositoryNotSupported(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != RepositoryNotSupported || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = RepositoryNotSupported
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionTrue,
		Reason:  RepositoryNotSupported,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetMaybeStaleDueToRepositoryNotSupported(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != RepositoryNotSupported || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = RepositoryNotSupported
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionUnknown,
		Reason:  RepositoryNotSupported,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetStaleDueToUnsupportedBranchStrategy(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != UnsupportedBranchStrategy || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = UnsupportedBranchStrategy
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionTrue,
		Reason:  UnsupportedBranchStrategy,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetMaybeStaleDueToUnsupportedBranchStrategy(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != UnsupportedBranchStrategy || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = UnsupportedBranchStrategy
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionUnknown,
		Reason:  UnsupportedBranchStrategy,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetCurrentIfStaleDueToAnyOf(reasons ...string) bool {
	changed := false
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Stale || !slices.Contains(reasons, c.Reason) {
			newConditions = append(newConditions, c)
		} else {
			changed = true
		}
	}
	if changed {
		s.Conditions = newConditions
	}
	return changed
}

func (s *EnvironmentStatus) SetCurrent() {
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Stale {
			newConditions = append(newConditions, c)
		}
	}
	s.Conditions = newConditions
}

func (s *EnvironmentStatus) IsCurrent() bool {
	for _, c := range s.Conditions {
		if c.Type == Stale {
			return c.Status != v1.ConditionTrue
		}
	}
	return true
}

func (s *EnvironmentStatus) IsStale() bool {
	for _, c := range s.Conditions {
		if c.Type == Stale {
			return c.Status == v1.ConditionTrue || c.Status == v1.ConditionUnknown
		}
	}
	return false
}

func (s *EnvironmentStatus) GetStaleCondition() *v1.Condition {
	for _, c := range s.Conditions {
		if c.Type == Stale {
			lc := c
			return &lc
		}
	}
	return nil
}

func (s *EnvironmentStatus) GetStaleReason() string {
	for _, c := range s.Conditions {
		if c.Type == Stale {
			return c.Reason
		}
	}
	return ""
}

func (s *EnvironmentStatus) GetStaleStatus() *v1.ConditionStatus {
	for _, c := range s.Conditions {
		if c.Type == Stale {
			status := c.Status
			return &status
		}
	}
	return nil
}

func (s *EnvironmentStatus) GetStaleMessage() string {
	for _, c := range s.Conditions {
		if c.Type == Stale {
			return c.Message
		}
	}
	return ""
}

func (s *EnvironmentStatus) SetFinalizingDueToFinalizationFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != FinalizationFailed || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = FinalizationFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionTrue,
		Reason:  FinalizationFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetMaybeFinalizingDueToFinalizationFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != FinalizationFailed || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = FinalizationFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionUnknown,
		Reason:  FinalizationFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetFinalizingDueToFinalizerRemovalFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != FinalizerRemovalFailed || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = FinalizerRemovalFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionTrue,
		Reason:  FinalizerRemovalFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetMaybeFinalizingDueToFinalizerRemovalFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != FinalizerRemovalFailed || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = FinalizerRemovalFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionUnknown,
		Reason:  FinalizerRemovalFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetFinalizingDueToInProgress(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != InProgress || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = InProgress
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionTrue,
		Reason:  InProgress,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetMaybeFinalizingDueToInProgress(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != InProgress || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = InProgress
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionUnknown,
		Reason:  InProgress,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetFinalizedIfFinalizingDueToAnyOf(reasons ...string) bool {
	changed := false
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Finalizing || !slices.Contains(reasons, c.Reason) {
			newConditions = append(newConditions, c)
		} else {
			changed = true
		}
	}
	if changed {
		s.Conditions = newConditions
	}
	return changed
}

func (s *EnvironmentStatus) SetFinalized() {
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Finalizing {
			newConditions = append(newConditions, c)
		}
	}
	s.Conditions = newConditions
}

func (s *EnvironmentStatus) IsFinalized() bool {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			return c.Status != v1.ConditionTrue
		}
	}
	return true
}

func (s *EnvironmentStatus) IsFinalizing() bool {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			return c.Status == v1.ConditionTrue || c.Status == v1.ConditionUnknown
		}
	}
	return false
}

func (s *EnvironmentStatus) GetFinalizingCondition() *v1.Condition {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			lc := c
			return &lc
		}
	}
	return nil
}

func (s *EnvironmentStatus) GetFinalizingReason() string {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			return c.Reason
		}
	}
	return ""
}

func (s *EnvironmentStatus) GetFinalizingStatus() *v1.ConditionStatus {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			status := c.Status
			return &status
		}
	}
	return nil
}

func (s *EnvironmentStatus) GetFinalizingMessage() string {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			return c.Message
		}
	}
	return ""
}

func (s *EnvironmentStatus) SetFailedToInitializeDueToInternalError(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != InternalError || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = InternalError
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    FailedToInitialize,
		Status:  v1.ConditionTrue,
		Reason:  InternalError,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetMaybeFailedToInitializeDueToInternalError(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != InternalError || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = InternalError
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    FailedToInitialize,
		Status:  v1.ConditionUnknown,
		Reason:  InternalError,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetInitializedIfFailedToInitializeDueToAnyOf(reasons ...string) bool {
	changed := false
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != FailedToInitialize || !slices.Contains(reasons, c.Reason) {
			newConditions = append(newConditions, c)
		} else {
			changed = true
		}
	}
	if changed {
		s.Conditions = newConditions
	}
	return changed
}

func (s *EnvironmentStatus) SetInitialized() {
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != FailedToInitialize {
			newConditions = append(newConditions, c)
		}
	}
	s.Conditions = newConditions
}

func (s *EnvironmentStatus) IsInitialized() bool {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			return c.Status != v1.ConditionTrue
		}
	}
	return true
}

func (s *EnvironmentStatus) IsFailedToInitialize() bool {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			return c.Status == v1.ConditionTrue || c.Status == v1.ConditionUnknown
		}
	}
	return false
}

func (s *EnvironmentStatus) GetFailedToInitializeCondition() *v1.Condition {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			lc := c
			return &lc
		}
	}
	return nil
}

func (s *EnvironmentStatus) GetFailedToInitializeReason() string {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			return c.Reason
		}
	}
	return ""
}

func (s *EnvironmentStatus) GetFailedToInitializeStatus() *v1.ConditionStatus {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			status := c.Status
			return &status
		}
	}
	return nil
}

func (s *EnvironmentStatus) GetFailedToInitializeMessage() string {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			return c.Message
		}
	}
	return ""
}

func (s *EnvironmentStatus) SetInvalidDueToControllerNotAccessible(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != ControllerNotAccessible || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = ControllerNotAccessible
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionTrue,
		Reason:  ControllerNotAccessible,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetMaybeInvalidDueToControllerNotAccessible(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != ControllerNotAccessible || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = ControllerNotAccessible
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionUnknown,
		Reason:  ControllerNotAccessible,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetInvalidDueToControllerNotFound(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != ControllerNotFound || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = ControllerNotFound
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionTrue,
		Reason:  ControllerNotFound,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetMaybeInvalidDueToControllerNotFound(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != ControllerNotFound || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = ControllerNotFound
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionUnknown,
		Reason:  ControllerNotFound,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetInvalidDueToControllerReferenceMissing(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != ControllerReferenceMissing || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = ControllerReferenceMissing
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionTrue,
		Reason:  ControllerReferenceMissing,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetMaybeInvalidDueToControllerReferenceMissing(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != ControllerReferenceMissing || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = ControllerReferenceMissing
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionUnknown,
		Reason:  ControllerReferenceMissing,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetInvalidDueToInternalError(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != InternalError || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = InternalError
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionTrue,
		Reason:  InternalError,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetMaybeInvalidDueToInternalError(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != InternalError || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = InternalError
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionUnknown,
		Reason:  InternalError,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *EnvironmentStatus) SetValidIfInvalidDueToAnyOf(reasons ...string) bool {
	changed := false
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Invalid || !slices.Contains(reasons, c.Reason) {
			newConditions = append(newConditions, c)
		} else {
			changed = true
		}
	}
	if changed {
		s.Conditions = newConditions
	}
	return changed
}

func (s *EnvironmentStatus) SetValid() {
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Invalid {
			newConditions = append(newConditions, c)
		}
	}
	s.Conditions = newConditions
}

func (s *EnvironmentStatus) IsValid() bool {
	for _, c := range s.Conditions {
		if c.Type == Invalid {
			return c.Status != v1.ConditionTrue
		}
	}
	return true
}

func (s *EnvironmentStatus) IsInvalid() bool {
	for _, c := range s.Conditions {
		if c.Type == Invalid {
			return c.Status == v1.ConditionTrue || c.Status == v1.ConditionUnknown
		}
	}
	return false
}

func (s *EnvironmentStatus) GetInvalidCondition() *v1.Condition {
	for _, c := range s.Conditions {
		if c.Type == Invalid {
			lc := c
			return &lc
		}
	}
	return nil
}

func (s *EnvironmentStatus) GetInvalidReason() string {
	for _, c := range s.Conditions {
		if c.Type == Invalid {
			return c.Reason
		}
	}
	return ""
}

func (s *EnvironmentStatus) GetInvalidStatus() *v1.ConditionStatus {
	for _, c := range s.Conditions {
		if c.Type == Invalid {
			status := c.Status
			return &status
		}
	}
	return nil
}

func (s *EnvironmentStatus) GetInvalidMessage() string {
	for _, c := range s.Conditions {
		if c.Type == Invalid {
			return c.Message
		}
	}
	return ""
}

func (s *EnvironmentStatus) GetConditions() []v1.Condition {
	return s.Conditions
}

func (s *EnvironmentStatus) SetConditions(conditions []v1.Condition) {
	s.Conditions = conditions
}

func (s *EnvironmentStatus) ClearStaleConditions(currentGeneration int64) {
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.ObservedGeneration >= currentGeneration {
			newConditions = append(newConditions, c)
		}
	}
	s.Conditions = newConditions
}
