//go:build !ignore_autogenerated

// Code generated by devbot script. DO NOT EDIT.

package v1

import (
	. "github.com/arikkfir/devbot/backend/internal/util/k8s"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

func (s *DeploymentStatus) GetCondition(conditionType string) *v1.Condition {
	return GetCondition(s.Conditions, conditionType)
}

func (s *DeploymentStatus) SetFailedToInitializeDueToInternalError(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Initialized]; !ok || v != "No: "+InternalError {
		s.PrivateArea[Initialized] = "No: " + InternalError
		changed = true
	}
	changed = SetCondition(&s.Conditions, FailedToInitialize, v1.ConditionTrue, InternalError, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeFailedToInitializeDueToInternalError(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Initialized]; !ok || v != "No: "+InternalError {
		s.PrivateArea[Initialized] = "No: " + InternalError
		changed = true
	}
	changed = SetCondition(&s.Conditions, FailedToInitialize, v1.ConditionUnknown, InternalError, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetInitializedIfFailedToInitializeDueToAnyOf(reasons ...string) bool {
	changed := false
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, FailedToInitialize, reasons...) || changed
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if s.IsInitialized() {
		if v, ok := s.PrivateArea[Initialized]; !ok || v != "Yes" {
			s.PrivateArea[Initialized] = "Yes"
			changed = true
		}
	} else {
		if v, ok := s.PrivateArea[Initialized]; !ok || v != "No: "+s.GetFailedToInitializeReason() {
			s.PrivateArea[Initialized] = "No: " + s.GetFailedToInitializeReason()
			changed = true
		}
	}
	return changed
}

func (s *DeploymentStatus) SetInitialized() bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Initialized]; !ok || v != "Yes" {
		s.PrivateArea[Initialized] = "Yes"
		changed = true
	}
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, FailedToInitialize, InternalError, "NonExistent") || changed
	return changed
}

func (s *DeploymentStatus) IsInitialized() bool {
	return !HasCondition(s.Conditions, FailedToInitialize) || IsConditionStatusOneOf(s.Conditions, FailedToInitialize, v1.ConditionFalse)
}

func (s *DeploymentStatus) IsFailedToInitialize() bool {
	return IsConditionStatusOneOf(s.Conditions, FailedToInitialize, v1.ConditionTrue, v1.ConditionUnknown)
}

func (s *DeploymentStatus) GetFailedToInitializeCondition() *v1.Condition {
	return GetCondition(s.Conditions, FailedToInitialize)
}

func (s *DeploymentStatus) GetFailedToInitializeReason() string {
	return GetConditionReason(s.Conditions, FailedToInitialize)
}

func (s *DeploymentStatus) GetFailedToInitializeStatus() *v1.ConditionStatus {
	return GetConditionStatus(s.Conditions, FailedToInitialize)
}

func (s *DeploymentStatus) GetFailedToInitializeMessage() string {
	return GetConditionMessage(s.Conditions, FailedToInitialize)
}

func (s *DeploymentStatus) SetFinalizingDueToFinalizationFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Finalized]; !ok || v != "No: "+FinalizationFailed {
		s.PrivateArea[Finalized] = "No: " + FinalizationFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Finalizing, v1.ConditionTrue, FinalizationFailed, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeFinalizingDueToFinalizationFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Finalized]; !ok || v != "No: "+FinalizationFailed {
		s.PrivateArea[Finalized] = "No: " + FinalizationFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Finalizing, v1.ConditionUnknown, FinalizationFailed, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetFinalizingDueToFinalizerRemovalFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Finalized]; !ok || v != "No: "+FinalizerRemovalFailed {
		s.PrivateArea[Finalized] = "No: " + FinalizerRemovalFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Finalizing, v1.ConditionTrue, FinalizerRemovalFailed, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeFinalizingDueToFinalizerRemovalFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Finalized]; !ok || v != "No: "+FinalizerRemovalFailed {
		s.PrivateArea[Finalized] = "No: " + FinalizerRemovalFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Finalizing, v1.ConditionUnknown, FinalizerRemovalFailed, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetFinalizingDueToInProgress(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Finalized]; !ok || v != "No: "+InProgress {
		s.PrivateArea[Finalized] = "No: " + InProgress
		changed = true
	}
	changed = SetCondition(&s.Conditions, Finalizing, v1.ConditionTrue, InProgress, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeFinalizingDueToInProgress(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Finalized]; !ok || v != "No: "+InProgress {
		s.PrivateArea[Finalized] = "No: " + InProgress
		changed = true
	}
	changed = SetCondition(&s.Conditions, Finalizing, v1.ConditionUnknown, InProgress, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetFinalizedIfFinalizingDueToAnyOf(reasons ...string) bool {
	changed := false
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, Finalizing, reasons...) || changed
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if s.IsFinalized() {
		if v, ok := s.PrivateArea[Finalized]; !ok || v != "Yes" {
			s.PrivateArea[Finalized] = "Yes"
			changed = true
		}
	} else {
		if v, ok := s.PrivateArea[Finalized]; !ok || v != "No: "+s.GetFinalizingReason() {
			s.PrivateArea[Finalized] = "No: " + s.GetFinalizingReason()
			changed = true
		}
	}
	return changed
}

func (s *DeploymentStatus) SetFinalized() bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Finalized]; !ok || v != "Yes" {
		s.PrivateArea[Finalized] = "Yes"
		changed = true
	}
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, Finalizing, FinalizationFailed, FinalizerRemovalFailed, InProgress, "NonExistent") || changed
	return changed
}

func (s *DeploymentStatus) IsFinalized() bool {
	return !HasCondition(s.Conditions, Finalizing) || IsConditionStatusOneOf(s.Conditions, Finalizing, v1.ConditionFalse)
}

func (s *DeploymentStatus) IsFinalizing() bool {
	return IsConditionStatusOneOf(s.Conditions, Finalizing, v1.ConditionTrue, v1.ConditionUnknown)
}

func (s *DeploymentStatus) GetFinalizingCondition() *v1.Condition {
	return GetCondition(s.Conditions, Finalizing)
}

func (s *DeploymentStatus) GetFinalizingReason() string {
	return GetConditionReason(s.Conditions, Finalizing)
}

func (s *DeploymentStatus) GetFinalizingStatus() *v1.ConditionStatus {
	return GetConditionStatus(s.Conditions, Finalizing)
}

func (s *DeploymentStatus) GetFinalizingMessage() string {
	return GetConditionMessage(s.Conditions, Finalizing)
}

func (s *DeploymentStatus) SetInvalidDueToControllerNotAccessible(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+ControllerNotAccessible {
		s.PrivateArea[Valid] = "No: " + ControllerNotAccessible
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, ControllerNotAccessible, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeInvalidDueToControllerNotAccessible(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+ControllerNotAccessible {
		s.PrivateArea[Valid] = "No: " + ControllerNotAccessible
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, ControllerNotAccessible, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetInvalidDueToControllerNotFound(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+ControllerNotFound {
		s.PrivateArea[Valid] = "No: " + ControllerNotFound
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, ControllerNotFound, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeInvalidDueToControllerNotFound(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+ControllerNotFound {
		s.PrivateArea[Valid] = "No: " + ControllerNotFound
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, ControllerNotFound, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetInvalidDueToControllerReferenceMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+ControllerReferenceMissing {
		s.PrivateArea[Valid] = "No: " + ControllerReferenceMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, ControllerReferenceMissing, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeInvalidDueToControllerReferenceMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+ControllerReferenceMissing {
		s.PrivateArea[Valid] = "No: " + ControllerReferenceMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, ControllerReferenceMissing, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetInvalidDueToInternalError(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+InternalError {
		s.PrivateArea[Valid] = "No: " + InternalError
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, InternalError, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeInvalidDueToInternalError(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+InternalError {
		s.PrivateArea[Valid] = "No: " + InternalError
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, InternalError, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetInvalidDueToRepositoryNotSupported(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+RepositoryNotSupported {
		s.PrivateArea[Valid] = "No: " + RepositoryNotSupported
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, RepositoryNotSupported, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeInvalidDueToRepositoryNotSupported(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+RepositoryNotSupported {
		s.PrivateArea[Valid] = "No: " + RepositoryNotSupported
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, RepositoryNotSupported, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetValidIfInvalidDueToAnyOf(reasons ...string) bool {
	changed := false
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, Invalid, reasons...) || changed
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if s.IsValid() {
		if v, ok := s.PrivateArea[Valid]; !ok || v != "Yes" {
			s.PrivateArea[Valid] = "Yes"
			changed = true
		}
	} else {
		if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+s.GetInvalidReason() {
			s.PrivateArea[Valid] = "No: " + s.GetInvalidReason()
			changed = true
		}
	}
	return changed
}

func (s *DeploymentStatus) SetValid() bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "Yes" {
		s.PrivateArea[Valid] = "Yes"
		changed = true
	}
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, Invalid, ControllerNotAccessible, ControllerNotFound, ControllerReferenceMissing, InternalError, RepositoryNotSupported, "NonExistent") || changed
	return changed
}

func (s *DeploymentStatus) IsValid() bool {
	return !HasCondition(s.Conditions, Invalid) || IsConditionStatusOneOf(s.Conditions, Invalid, v1.ConditionFalse)
}

func (s *DeploymentStatus) IsInvalid() bool {
	return IsConditionStatusOneOf(s.Conditions, Invalid, v1.ConditionTrue, v1.ConditionUnknown)
}

func (s *DeploymentStatus) GetInvalidCondition() *v1.Condition {
	return GetCondition(s.Conditions, Invalid)
}

func (s *DeploymentStatus) GetInvalidReason() string {
	return GetConditionReason(s.Conditions, Invalid)
}

func (s *DeploymentStatus) GetInvalidStatus() *v1.ConditionStatus {
	return GetConditionStatus(s.Conditions, Invalid)
}

func (s *DeploymentStatus) GetInvalidMessage() string {
	return GetConditionMessage(s.Conditions, Invalid)
}

func (s *DeploymentStatus) SetStaleDueToApplyFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+ApplyFailed {
		s.PrivateArea[Current] = "No: " + ApplyFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, ApplyFailed, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeStaleDueToApplyFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+ApplyFailed {
		s.PrivateArea[Current] = "No: " + ApplyFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, ApplyFailed, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetStaleDueToApplying(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+Applying {
		s.PrivateArea[Current] = "No: " + Applying
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, Applying, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeStaleDueToApplying(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+Applying {
		s.PrivateArea[Current] = "No: " + Applying
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, Applying, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetStaleDueToBaking(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+Baking {
		s.PrivateArea[Current] = "No: " + Baking
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, Baking, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeStaleDueToBaking(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+Baking {
		s.PrivateArea[Current] = "No: " + Baking
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, Baking, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetStaleDueToBakingFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+BakingFailed {
		s.PrivateArea[Current] = "No: " + BakingFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, BakingFailed, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeStaleDueToBakingFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+BakingFailed {
		s.PrivateArea[Current] = "No: " + BakingFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, BakingFailed, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetStaleDueToBranchNotFound(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+BranchNotFound {
		s.PrivateArea[Current] = "No: " + BranchNotFound
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, BranchNotFound, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeStaleDueToBranchNotFound(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+BranchNotFound {
		s.PrivateArea[Current] = "No: " + BranchNotFound
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, BranchNotFound, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetStaleDueToCloneFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+CloneFailed {
		s.PrivateArea[Current] = "No: " + CloneFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, CloneFailed, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeStaleDueToCloneFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+CloneFailed {
		s.PrivateArea[Current] = "No: " + CloneFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, CloneFailed, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetStaleDueToCloning(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+Cloning {
		s.PrivateArea[Current] = "No: " + Cloning
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, Cloning, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeStaleDueToCloning(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+Cloning {
		s.PrivateArea[Current] = "No: " + Cloning
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, Cloning, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetStaleDueToInternalError(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+InternalError {
		s.PrivateArea[Current] = "No: " + InternalError
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, InternalError, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeStaleDueToInternalError(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+InternalError {
		s.PrivateArea[Current] = "No: " + InternalError
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, InternalError, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetStaleDueToInvalid(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+Invalid {
		s.PrivateArea[Current] = "No: " + Invalid
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, Invalid, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeStaleDueToInvalid(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+Invalid {
		s.PrivateArea[Current] = "No: " + Invalid
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, Invalid, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetStaleDueToPersistentVolumeCreationFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+PersistentVolumeCreationFailed {
		s.PrivateArea[Current] = "No: " + PersistentVolumeCreationFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, PersistentVolumeCreationFailed, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeStaleDueToPersistentVolumeCreationFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+PersistentVolumeCreationFailed {
		s.PrivateArea[Current] = "No: " + PersistentVolumeCreationFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, PersistentVolumeCreationFailed, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetStaleDueToPersistentVolumeMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+PersistentVolumeMissing {
		s.PrivateArea[Current] = "No: " + PersistentVolumeMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, PersistentVolumeMissing, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeStaleDueToPersistentVolumeMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+PersistentVolumeMissing {
		s.PrivateArea[Current] = "No: " + PersistentVolumeMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, PersistentVolumeMissing, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetStaleDueToRepositoryNotAccessible(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+RepositoryNotAccessible {
		s.PrivateArea[Current] = "No: " + RepositoryNotAccessible
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, RepositoryNotAccessible, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeStaleDueToRepositoryNotAccessible(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+RepositoryNotAccessible {
		s.PrivateArea[Current] = "No: " + RepositoryNotAccessible
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, RepositoryNotAccessible, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetStaleDueToRepositoryNotFound(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+RepositoryNotFound {
		s.PrivateArea[Current] = "No: " + RepositoryNotFound
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, RepositoryNotFound, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetMaybeStaleDueToRepositoryNotFound(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+RepositoryNotFound {
		s.PrivateArea[Current] = "No: " + RepositoryNotFound
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, RepositoryNotFound, message, args...) || changed
	return changed
}

func (s *DeploymentStatus) SetCurrentIfStaleDueToAnyOf(reasons ...string) bool {
	changed := false
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, Stale, reasons...) || changed
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if s.IsCurrent() {
		if v, ok := s.PrivateArea[Current]; !ok || v != "Yes" {
			s.PrivateArea[Current] = "Yes"
			changed = true
		}
	} else {
		if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+s.GetStaleReason() {
			s.PrivateArea[Current] = "No: " + s.GetStaleReason()
			changed = true
		}
	}
	return changed
}

func (s *DeploymentStatus) SetCurrent() bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "Yes" {
		s.PrivateArea[Current] = "Yes"
		changed = true
	}
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, Stale, ApplyFailed, Applying, Baking, BakingFailed, BranchNotFound, CloneFailed, Cloning, InternalError, Invalid, PersistentVolumeCreationFailed, PersistentVolumeMissing, RepositoryNotAccessible, RepositoryNotFound, "NonExistent") || changed
	return changed
}

func (s *DeploymentStatus) IsCurrent() bool {
	return !HasCondition(s.Conditions, Stale) || IsConditionStatusOneOf(s.Conditions, Stale, v1.ConditionFalse)
}

func (s *DeploymentStatus) IsStale() bool {
	return IsConditionStatusOneOf(s.Conditions, Stale, v1.ConditionTrue, v1.ConditionUnknown)
}

func (s *DeploymentStatus) GetStaleCondition() *v1.Condition {
	return GetCondition(s.Conditions, Stale)
}

func (s *DeploymentStatus) GetStaleReason() string {
	return GetConditionReason(s.Conditions, Stale)
}

func (s *DeploymentStatus) GetStaleStatus() *v1.ConditionStatus {
	return GetConditionStatus(s.Conditions, Stale)
}

func (s *DeploymentStatus) GetStaleMessage() string {
	return GetConditionMessage(s.Conditions, Stale)
}

func (s *DeploymentStatus) GetConditions() []v1.Condition {
	return s.Conditions
}

func (s *DeploymentStatus) SetGenerationAndTransitionTime(generation int64) {
	SetConditionsGenerationAndTransitionTime(s.Conditions, generation)
}

func (s *DeploymentStatus) ClearStaleConditions(currentGeneration int64) {
	ClearStaleConditions(&s.Conditions, currentGeneration)
}
