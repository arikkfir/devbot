//go:build !ignore_autogenerated

// Code generated by devbot script. DO NOT EDIT.

package v1

import (
	. "github.com/arikkfir/devbot/backend/internal/util/k8s"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

func (s *RepositoryStatus) GetCondition(conditionType string) *v1.Condition {
	return GetCondition(s.Conditions, conditionType)
}

func (s *RepositoryStatus) SetFinalizingDueToFinalizationFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Finalized]; !ok || v != "No: "+FinalizationFailed {
		s.PrivateArea[Finalized] = "No: " + FinalizationFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Finalizing, v1.ConditionTrue, FinalizationFailed, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeFinalizingDueToFinalizationFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Finalized]; !ok || v != "No: "+FinalizationFailed {
		s.PrivateArea[Finalized] = "No: " + FinalizationFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Finalizing, v1.ConditionUnknown, FinalizationFailed, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetFinalizingDueToFinalizerRemovalFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Finalized]; !ok || v != "No: "+FinalizerRemovalFailed {
		s.PrivateArea[Finalized] = "No: " + FinalizerRemovalFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Finalizing, v1.ConditionTrue, FinalizerRemovalFailed, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeFinalizingDueToFinalizerRemovalFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Finalized]; !ok || v != "No: "+FinalizerRemovalFailed {
		s.PrivateArea[Finalized] = "No: " + FinalizerRemovalFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Finalizing, v1.ConditionUnknown, FinalizerRemovalFailed, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetFinalizingDueToInProgress(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Finalized]; !ok || v != "No: "+InProgress {
		s.PrivateArea[Finalized] = "No: " + InProgress
		changed = true
	}
	changed = SetCondition(&s.Conditions, Finalizing, v1.ConditionTrue, InProgress, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeFinalizingDueToInProgress(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Finalized]; !ok || v != "No: "+InProgress {
		s.PrivateArea[Finalized] = "No: " + InProgress
		changed = true
	}
	changed = SetCondition(&s.Conditions, Finalizing, v1.ConditionUnknown, InProgress, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetFinalizedIfFinalizingDueToAnyOf(reasons ...string) bool {
	changed := false
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, Finalizing, reasons...) || changed
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if s.IsFinalized() {
		if v, ok := s.PrivateArea[Finalized]; !ok || v != "Yes" {
			s.PrivateArea[Finalized] = "Yes"
			changed = true
		}
	} else {
		if v, ok := s.PrivateArea[Finalized]; !ok || v != "No: "+s.GetFinalizingReason() {
			s.PrivateArea[Finalized] = "No: " + s.GetFinalizingReason()
			changed = true
		}
	}
	return changed
}

func (s *RepositoryStatus) SetFinalized() bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Finalized]; !ok || v != "Yes" {
		s.PrivateArea[Finalized] = "Yes"
		changed = true
	}
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, Finalizing, FinalizationFailed, FinalizerRemovalFailed, InProgress, "NonExistent") || changed
	return changed
}

func (s *RepositoryStatus) IsFinalized() bool {
	return !HasCondition(s.Conditions, Finalizing) || IsConditionStatusOneOf(s.Conditions, Finalizing, v1.ConditionFalse)
}

func (s *RepositoryStatus) IsFinalizing() bool {
	return IsConditionStatusOneOf(s.Conditions, Finalizing, v1.ConditionTrue, v1.ConditionUnknown)
}

func (s *RepositoryStatus) GetFinalizingCondition() *v1.Condition {
	return GetCondition(s.Conditions, Finalizing)
}

func (s *RepositoryStatus) GetFinalizingReason() string {
	return GetConditionReason(s.Conditions, Finalizing)
}

func (s *RepositoryStatus) GetFinalizingStatus() *v1.ConditionStatus {
	return GetConditionStatus(s.Conditions, Finalizing)
}

func (s *RepositoryStatus) GetFinalizingMessage() string {
	return GetConditionMessage(s.Conditions, Finalizing)
}

func (s *RepositoryStatus) SetFailedToInitializeDueToInternalError(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Initialized]; !ok || v != "No: "+InternalError {
		s.PrivateArea[Initialized] = "No: " + InternalError
		changed = true
	}
	changed = SetCondition(&s.Conditions, FailedToInitialize, v1.ConditionTrue, InternalError, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeFailedToInitializeDueToInternalError(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Initialized]; !ok || v != "No: "+InternalError {
		s.PrivateArea[Initialized] = "No: " + InternalError
		changed = true
	}
	changed = SetCondition(&s.Conditions, FailedToInitialize, v1.ConditionUnknown, InternalError, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetInitializedIfFailedToInitializeDueToAnyOf(reasons ...string) bool {
	changed := false
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, FailedToInitialize, reasons...) || changed
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if s.IsInitialized() {
		if v, ok := s.PrivateArea[Initialized]; !ok || v != "Yes" {
			s.PrivateArea[Initialized] = "Yes"
			changed = true
		}
	} else {
		if v, ok := s.PrivateArea[Initialized]; !ok || v != "No: "+s.GetFailedToInitializeReason() {
			s.PrivateArea[Initialized] = "No: " + s.GetFailedToInitializeReason()
			changed = true
		}
	}
	return changed
}

func (s *RepositoryStatus) SetInitialized() bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Initialized]; !ok || v != "Yes" {
		s.PrivateArea[Initialized] = "Yes"
		changed = true
	}
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, FailedToInitialize, InternalError, "NonExistent") || changed
	return changed
}

func (s *RepositoryStatus) IsInitialized() bool {
	return !HasCondition(s.Conditions, FailedToInitialize) || IsConditionStatusOneOf(s.Conditions, FailedToInitialize, v1.ConditionFalse)
}

func (s *RepositoryStatus) IsFailedToInitialize() bool {
	return IsConditionStatusOneOf(s.Conditions, FailedToInitialize, v1.ConditionTrue, v1.ConditionUnknown)
}

func (s *RepositoryStatus) GetFailedToInitializeCondition() *v1.Condition {
	return GetCondition(s.Conditions, FailedToInitialize)
}

func (s *RepositoryStatus) GetFailedToInitializeReason() string {
	return GetConditionReason(s.Conditions, FailedToInitialize)
}

func (s *RepositoryStatus) GetFailedToInitializeStatus() *v1.ConditionStatus {
	return GetConditionStatus(s.Conditions, FailedToInitialize)
}

func (s *RepositoryStatus) GetFailedToInitializeMessage() string {
	return GetConditionMessage(s.Conditions, FailedToInitialize)
}

func (s *RepositoryStatus) SetInvalidDueToAuthConfigMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+AuthConfigMissing {
		s.PrivateArea[Valid] = "No: " + AuthConfigMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, AuthConfigMissing, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeInvalidDueToAuthConfigMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+AuthConfigMissing {
		s.PrivateArea[Valid] = "No: " + AuthConfigMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, AuthConfigMissing, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetInvalidDueToAuthSecretKeyMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+AuthSecretKeyMissing {
		s.PrivateArea[Valid] = "No: " + AuthSecretKeyMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, AuthSecretKeyMissing, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeInvalidDueToAuthSecretKeyMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+AuthSecretKeyMissing {
		s.PrivateArea[Valid] = "No: " + AuthSecretKeyMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, AuthSecretKeyMissing, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetInvalidDueToAuthSecretNameMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+AuthSecretNameMissing {
		s.PrivateArea[Valid] = "No: " + AuthSecretNameMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, AuthSecretNameMissing, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeInvalidDueToAuthSecretNameMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+AuthSecretNameMissing {
		s.PrivateArea[Valid] = "No: " + AuthSecretNameMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, AuthSecretNameMissing, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetInvalidDueToControllerNotAccessible(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+ControllerNotAccessible {
		s.PrivateArea[Valid] = "No: " + ControllerNotAccessible
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, ControllerNotAccessible, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeInvalidDueToControllerNotAccessible(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+ControllerNotAccessible {
		s.PrivateArea[Valid] = "No: " + ControllerNotAccessible
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, ControllerNotAccessible, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetInvalidDueToControllerNotFound(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+ControllerNotFound {
		s.PrivateArea[Valid] = "No: " + ControllerNotFound
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, ControllerNotFound, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeInvalidDueToControllerNotFound(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+ControllerNotFound {
		s.PrivateArea[Valid] = "No: " + ControllerNotFound
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, ControllerNotFound, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetInvalidDueToControllerReferenceMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+ControllerReferenceMissing {
		s.PrivateArea[Valid] = "No: " + ControllerReferenceMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, ControllerReferenceMissing, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeInvalidDueToControllerReferenceMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+ControllerReferenceMissing {
		s.PrivateArea[Valid] = "No: " + ControllerReferenceMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, ControllerReferenceMissing, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetInvalidDueToInternalError(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+InternalError {
		s.PrivateArea[Valid] = "No: " + InternalError
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, InternalError, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeInvalidDueToInternalError(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+InternalError {
		s.PrivateArea[Valid] = "No: " + InternalError
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, InternalError, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetInvalidDueToInvalidRefreshInterval(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+InvalidRefreshInterval {
		s.PrivateArea[Valid] = "No: " + InvalidRefreshInterval
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, InvalidRefreshInterval, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeInvalidDueToInvalidRefreshInterval(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+InvalidRefreshInterval {
		s.PrivateArea[Valid] = "No: " + InvalidRefreshInterval
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, InvalidRefreshInterval, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetInvalidDueToRepositoryNameMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+RepositoryNameMissing {
		s.PrivateArea[Valid] = "No: " + RepositoryNameMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, RepositoryNameMissing, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeInvalidDueToRepositoryNameMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+RepositoryNameMissing {
		s.PrivateArea[Valid] = "No: " + RepositoryNameMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, RepositoryNameMissing, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetInvalidDueToRepositoryOwnerMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+RepositoryOwnerMissing {
		s.PrivateArea[Valid] = "No: " + RepositoryOwnerMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, RepositoryOwnerMissing, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeInvalidDueToRepositoryOwnerMissing(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+RepositoryOwnerMissing {
		s.PrivateArea[Valid] = "No: " + RepositoryOwnerMissing
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, RepositoryOwnerMissing, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetInvalidDueToUnknownRepositoryType(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+UnknownRepositoryType {
		s.PrivateArea[Valid] = "No: " + UnknownRepositoryType
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionTrue, UnknownRepositoryType, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeInvalidDueToUnknownRepositoryType(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+UnknownRepositoryType {
		s.PrivateArea[Valid] = "No: " + UnknownRepositoryType
		changed = true
	}
	changed = SetCondition(&s.Conditions, Invalid, v1.ConditionUnknown, UnknownRepositoryType, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetValidIfInvalidDueToAnyOf(reasons ...string) bool {
	changed := false
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, Invalid, reasons...) || changed
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if s.IsValid() {
		if v, ok := s.PrivateArea[Valid]; !ok || v != "Yes" {
			s.PrivateArea[Valid] = "Yes"
			changed = true
		}
	} else {
		if v, ok := s.PrivateArea[Valid]; !ok || v != "No: "+s.GetInvalidReason() {
			s.PrivateArea[Valid] = "No: " + s.GetInvalidReason()
			changed = true
		}
	}
	return changed
}

func (s *RepositoryStatus) SetValid() bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Valid]; !ok || v != "Yes" {
		s.PrivateArea[Valid] = "Yes"
		changed = true
	}
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, Invalid, AuthConfigMissing, AuthSecretKeyMissing, AuthSecretNameMissing, ControllerNotAccessible, ControllerNotFound, ControllerReferenceMissing, InternalError, InvalidRefreshInterval, RepositoryNameMissing, RepositoryOwnerMissing, UnknownRepositoryType, "NonExistent") || changed
	return changed
}

func (s *RepositoryStatus) IsValid() bool {
	return !HasCondition(s.Conditions, Invalid) || IsConditionStatusOneOf(s.Conditions, Invalid, v1.ConditionFalse)
}

func (s *RepositoryStatus) IsInvalid() bool {
	return IsConditionStatusOneOf(s.Conditions, Invalid, v1.ConditionTrue, v1.ConditionUnknown)
}

func (s *RepositoryStatus) GetInvalidCondition() *v1.Condition {
	return GetCondition(s.Conditions, Invalid)
}

func (s *RepositoryStatus) GetInvalidReason() string {
	return GetConditionReason(s.Conditions, Invalid)
}

func (s *RepositoryStatus) GetInvalidStatus() *v1.ConditionStatus {
	return GetConditionStatus(s.Conditions, Invalid)
}

func (s *RepositoryStatus) GetInvalidMessage() string {
	return GetConditionMessage(s.Conditions, Invalid)
}

func (s *RepositoryStatus) SetUnauthenticatedDueToAuthSecretForbidden(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Authenticated]; !ok || v != "No: "+AuthSecretForbidden {
		s.PrivateArea[Authenticated] = "No: " + AuthSecretForbidden
		changed = true
	}
	changed = SetCondition(&s.Conditions, Unauthenticated, v1.ConditionTrue, AuthSecretForbidden, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeUnauthenticatedDueToAuthSecretForbidden(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Authenticated]; !ok || v != "No: "+AuthSecretForbidden {
		s.PrivateArea[Authenticated] = "No: " + AuthSecretForbidden
		changed = true
	}
	changed = SetCondition(&s.Conditions, Unauthenticated, v1.ConditionUnknown, AuthSecretForbidden, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetUnauthenticatedDueToAuthSecretKeyNotFound(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Authenticated]; !ok || v != "No: "+AuthSecretKeyNotFound {
		s.PrivateArea[Authenticated] = "No: " + AuthSecretKeyNotFound
		changed = true
	}
	changed = SetCondition(&s.Conditions, Unauthenticated, v1.ConditionTrue, AuthSecretKeyNotFound, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeUnauthenticatedDueToAuthSecretKeyNotFound(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Authenticated]; !ok || v != "No: "+AuthSecretKeyNotFound {
		s.PrivateArea[Authenticated] = "No: " + AuthSecretKeyNotFound
		changed = true
	}
	changed = SetCondition(&s.Conditions, Unauthenticated, v1.ConditionUnknown, AuthSecretKeyNotFound, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetUnauthenticatedDueToAuthSecretNotFound(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Authenticated]; !ok || v != "No: "+AuthSecretNotFound {
		s.PrivateArea[Authenticated] = "No: " + AuthSecretNotFound
		changed = true
	}
	changed = SetCondition(&s.Conditions, Unauthenticated, v1.ConditionTrue, AuthSecretNotFound, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeUnauthenticatedDueToAuthSecretNotFound(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Authenticated]; !ok || v != "No: "+AuthSecretNotFound {
		s.PrivateArea[Authenticated] = "No: " + AuthSecretNotFound
		changed = true
	}
	changed = SetCondition(&s.Conditions, Unauthenticated, v1.ConditionUnknown, AuthSecretNotFound, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetUnauthenticatedDueToAuthTokenEmpty(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Authenticated]; !ok || v != "No: "+AuthTokenEmpty {
		s.PrivateArea[Authenticated] = "No: " + AuthTokenEmpty
		changed = true
	}
	changed = SetCondition(&s.Conditions, Unauthenticated, v1.ConditionTrue, AuthTokenEmpty, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeUnauthenticatedDueToAuthTokenEmpty(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Authenticated]; !ok || v != "No: "+AuthTokenEmpty {
		s.PrivateArea[Authenticated] = "No: " + AuthTokenEmpty
		changed = true
	}
	changed = SetCondition(&s.Conditions, Unauthenticated, v1.ConditionUnknown, AuthTokenEmpty, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetUnauthenticatedDueToAuthenticationFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Authenticated]; !ok || v != "No: "+AuthenticationFailed {
		s.PrivateArea[Authenticated] = "No: " + AuthenticationFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Unauthenticated, v1.ConditionTrue, AuthenticationFailed, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeUnauthenticatedDueToAuthenticationFailed(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Authenticated]; !ok || v != "No: "+AuthenticationFailed {
		s.PrivateArea[Authenticated] = "No: " + AuthenticationFailed
		changed = true
	}
	changed = SetCondition(&s.Conditions, Unauthenticated, v1.ConditionUnknown, AuthenticationFailed, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetUnauthenticatedDueToInternalError(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Authenticated]; !ok || v != "No: "+InternalError {
		s.PrivateArea[Authenticated] = "No: " + InternalError
		changed = true
	}
	changed = SetCondition(&s.Conditions, Unauthenticated, v1.ConditionTrue, InternalError, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeUnauthenticatedDueToInternalError(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Authenticated]; !ok || v != "No: "+InternalError {
		s.PrivateArea[Authenticated] = "No: " + InternalError
		changed = true
	}
	changed = SetCondition(&s.Conditions, Unauthenticated, v1.ConditionUnknown, InternalError, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetUnauthenticatedDueToInvalid(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Authenticated]; !ok || v != "No: "+Invalid {
		s.PrivateArea[Authenticated] = "No: " + Invalid
		changed = true
	}
	changed = SetCondition(&s.Conditions, Unauthenticated, v1.ConditionTrue, Invalid, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeUnauthenticatedDueToInvalid(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Authenticated]; !ok || v != "No: "+Invalid {
		s.PrivateArea[Authenticated] = "No: " + Invalid
		changed = true
	}
	changed = SetCondition(&s.Conditions, Unauthenticated, v1.ConditionUnknown, Invalid, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetAuthenticatedIfUnauthenticatedDueToAnyOf(reasons ...string) bool {
	changed := false
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, Unauthenticated, reasons...) || changed
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if s.IsAuthenticated() {
		if v, ok := s.PrivateArea[Authenticated]; !ok || v != "Yes" {
			s.PrivateArea[Authenticated] = "Yes"
			changed = true
		}
	} else {
		if v, ok := s.PrivateArea[Authenticated]; !ok || v != "No: "+s.GetUnauthenticatedReason() {
			s.PrivateArea[Authenticated] = "No: " + s.GetUnauthenticatedReason()
			changed = true
		}
	}
	return changed
}

func (s *RepositoryStatus) SetAuthenticated() bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Authenticated]; !ok || v != "Yes" {
		s.PrivateArea[Authenticated] = "Yes"
		changed = true
	}
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, Unauthenticated, AuthSecretForbidden, AuthSecretKeyNotFound, AuthSecretNotFound, AuthTokenEmpty, AuthenticationFailed, InternalError, Invalid, "NonExistent") || changed
	return changed
}

func (s *RepositoryStatus) IsAuthenticated() bool {
	return !HasCondition(s.Conditions, Unauthenticated) || IsConditionStatusOneOf(s.Conditions, Unauthenticated, v1.ConditionFalse)
}

func (s *RepositoryStatus) IsUnauthenticated() bool {
	return IsConditionStatusOneOf(s.Conditions, Unauthenticated, v1.ConditionTrue, v1.ConditionUnknown)
}

func (s *RepositoryStatus) GetUnauthenticatedCondition() *v1.Condition {
	return GetCondition(s.Conditions, Unauthenticated)
}

func (s *RepositoryStatus) GetUnauthenticatedReason() string {
	return GetConditionReason(s.Conditions, Unauthenticated)
}

func (s *RepositoryStatus) GetUnauthenticatedStatus() *v1.ConditionStatus {
	return GetConditionStatus(s.Conditions, Unauthenticated)
}

func (s *RepositoryStatus) GetUnauthenticatedMessage() string {
	return GetConditionMessage(s.Conditions, Unauthenticated)
}

func (s *RepositoryStatus) SetStaleDueToBranchesOutOfSync(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+BranchesOutOfSync {
		s.PrivateArea[Current] = "No: " + BranchesOutOfSync
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, BranchesOutOfSync, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeStaleDueToBranchesOutOfSync(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+BranchesOutOfSync {
		s.PrivateArea[Current] = "No: " + BranchesOutOfSync
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, BranchesOutOfSync, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetStaleDueToDefaultBranchOutOfSync(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+DefaultBranchOutOfSync {
		s.PrivateArea[Current] = "No: " + DefaultBranchOutOfSync
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, DefaultBranchOutOfSync, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeStaleDueToDefaultBranchOutOfSync(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+DefaultBranchOutOfSync {
		s.PrivateArea[Current] = "No: " + DefaultBranchOutOfSync
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, DefaultBranchOutOfSync, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetStaleDueToInternalError(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+InternalError {
		s.PrivateArea[Current] = "No: " + InternalError
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, InternalError, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeStaleDueToInternalError(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+InternalError {
		s.PrivateArea[Current] = "No: " + InternalError
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, InternalError, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetStaleDueToInvalid(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+Invalid {
		s.PrivateArea[Current] = "No: " + Invalid
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, Invalid, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeStaleDueToInvalid(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+Invalid {
		s.PrivateArea[Current] = "No: " + Invalid
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, Invalid, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetStaleDueToRepositoryNotFound(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+RepositoryNotFound {
		s.PrivateArea[Current] = "No: " + RepositoryNotFound
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, RepositoryNotFound, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeStaleDueToRepositoryNotFound(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+RepositoryNotFound {
		s.PrivateArea[Current] = "No: " + RepositoryNotFound
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, RepositoryNotFound, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetStaleDueToUnauthenticated(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+Unauthenticated {
		s.PrivateArea[Current] = "No: " + Unauthenticated
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionTrue, Unauthenticated, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetMaybeStaleDueToUnauthenticated(message string, args ...interface{}) bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+Unauthenticated {
		s.PrivateArea[Current] = "No: " + Unauthenticated
		changed = true
	}
	changed = SetCondition(&s.Conditions, Stale, v1.ConditionUnknown, Unauthenticated, message, args...) || changed
	return changed
}

func (s *RepositoryStatus) SetCurrentIfStaleDueToAnyOf(reasons ...string) bool {
	changed := false
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, Stale, reasons...) || changed
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if s.IsCurrent() {
		if v, ok := s.PrivateArea[Current]; !ok || v != "Yes" {
			s.PrivateArea[Current] = "Yes"
			changed = true
		}
	} else {
		if v, ok := s.PrivateArea[Current]; !ok || v != "No: "+s.GetStaleReason() {
			s.PrivateArea[Current] = "No: " + s.GetStaleReason()
			changed = true
		}
	}
	return changed
}

func (s *RepositoryStatus) SetCurrent() bool {
	changed := false
	if s.PrivateArea == nil {
		s.PrivateArea = make(map[string]string)
	}
	if v, ok := s.PrivateArea[Current]; !ok || v != "Yes" {
		s.PrivateArea[Current] = "Yes"
		changed = true
	}
	changed = RemoveConditionIfReasonIsOneOf(&s.Conditions, Stale, BranchesOutOfSync, DefaultBranchOutOfSync, InternalError, Invalid, RepositoryNotFound, Unauthenticated, "NonExistent") || changed
	return changed
}

func (s *RepositoryStatus) IsCurrent() bool {
	return !HasCondition(s.Conditions, Stale) || IsConditionStatusOneOf(s.Conditions, Stale, v1.ConditionFalse)
}

func (s *RepositoryStatus) IsStale() bool {
	return IsConditionStatusOneOf(s.Conditions, Stale, v1.ConditionTrue, v1.ConditionUnknown)
}

func (s *RepositoryStatus) GetStaleCondition() *v1.Condition {
	return GetCondition(s.Conditions, Stale)
}

func (s *RepositoryStatus) GetStaleReason() string {
	return GetConditionReason(s.Conditions, Stale)
}

func (s *RepositoryStatus) GetStaleStatus() *v1.ConditionStatus {
	return GetConditionStatus(s.Conditions, Stale)
}

func (s *RepositoryStatus) GetStaleMessage() string {
	return GetConditionMessage(s.Conditions, Stale)
}

func (s *RepositoryStatus) GetConditions() []v1.Condition {
	return s.Conditions
}

func (s *RepositoryStatus) SetGenerationAndTransitionTime(generation int64) {
	SetConditionsGenerationAndTransitionTime(s.Conditions, generation)
}

func (s *RepositoryStatus) ClearStaleConditions(currentGeneration int64) {
	ClearStaleConditions(&s.Conditions, currentGeneration)
}
