//go:build !ignore_autogenerated

// Code generated by devbot script. DO NOT EDIT.

package v1

import (
	"fmt"

	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"slices"
)

func (s *GitHubRepositoryStatus) SetUnauthenticatedDueToAuthSecretForbidden(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Unauthenticated {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != AuthSecretForbidden || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = AuthSecretForbidden
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Unauthenticated,
		Status:  v1.ConditionTrue,
		Reason:  AuthSecretForbidden,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeUnauthenticatedDueToAuthSecretForbidden(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Unauthenticated {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != AuthSecretForbidden || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = AuthSecretForbidden
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Unauthenticated,
		Status:  v1.ConditionUnknown,
		Reason:  AuthSecretForbidden,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetUnauthenticatedDueToAuthSecretGetFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Unauthenticated {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != AuthSecretGetFailed || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = AuthSecretGetFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Unauthenticated,
		Status:  v1.ConditionTrue,
		Reason:  AuthSecretGetFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeUnauthenticatedDueToAuthSecretGetFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Unauthenticated {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != AuthSecretGetFailed || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = AuthSecretGetFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Unauthenticated,
		Status:  v1.ConditionUnknown,
		Reason:  AuthSecretGetFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetUnauthenticatedDueToAuthSecretKeyNotFound(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Unauthenticated {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != AuthSecretKeyNotFound || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = AuthSecretKeyNotFound
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Unauthenticated,
		Status:  v1.ConditionTrue,
		Reason:  AuthSecretKeyNotFound,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeUnauthenticatedDueToAuthSecretKeyNotFound(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Unauthenticated {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != AuthSecretKeyNotFound || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = AuthSecretKeyNotFound
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Unauthenticated,
		Status:  v1.ConditionUnknown,
		Reason:  AuthSecretKeyNotFound,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetUnauthenticatedDueToAuthSecretNotFound(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Unauthenticated {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != AuthSecretNotFound || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = AuthSecretNotFound
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Unauthenticated,
		Status:  v1.ConditionTrue,
		Reason:  AuthSecretNotFound,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeUnauthenticatedDueToAuthSecretNotFound(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Unauthenticated {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != AuthSecretNotFound || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = AuthSecretNotFound
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Unauthenticated,
		Status:  v1.ConditionUnknown,
		Reason:  AuthSecretNotFound,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetUnauthenticatedDueToAuthTokenEmpty(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Unauthenticated {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != AuthTokenEmpty || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = AuthTokenEmpty
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Unauthenticated,
		Status:  v1.ConditionTrue,
		Reason:  AuthTokenEmpty,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeUnauthenticatedDueToAuthTokenEmpty(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Unauthenticated {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != AuthTokenEmpty || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = AuthTokenEmpty
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Unauthenticated,
		Status:  v1.ConditionUnknown,
		Reason:  AuthTokenEmpty,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetUnauthenticatedDueToInvalid(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Unauthenticated {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != Invalid || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = Invalid
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Unauthenticated,
		Status:  v1.ConditionTrue,
		Reason:  Invalid,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeUnauthenticatedDueToInvalid(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Unauthenticated {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != Invalid || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = Invalid
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Unauthenticated,
		Status:  v1.ConditionUnknown,
		Reason:  Invalid,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetUnauthenticatedDueToTokenValidationFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Unauthenticated {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != TokenValidationFailed || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = TokenValidationFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Unauthenticated,
		Status:  v1.ConditionTrue,
		Reason:  TokenValidationFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeUnauthenticatedDueToTokenValidationFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Unauthenticated {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != TokenValidationFailed || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = TokenValidationFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Unauthenticated,
		Status:  v1.ConditionUnknown,
		Reason:  TokenValidationFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetAuthenticatedIfUnauthenticatedDueToAnyOf(reasons ...string) bool {
	changed := false
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Unauthenticated || !slices.Contains(reasons, c.Reason) {
			newConditions = append(newConditions, c)
		} else {
			changed = true
		}
	}
	if changed {
		s.Conditions = newConditions
	}
	return changed
}

func (s *GitHubRepositoryStatus) SetAuthenticated() {
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Unauthenticated {
			newConditions = append(newConditions, c)
		}
	}
	s.Conditions = newConditions
}

func (s *GitHubRepositoryStatus) IsAuthenticated() bool {
	for _, c := range s.Conditions {
		if c.Type == Unauthenticated {
			return c.Status != v1.ConditionTrue
		}
	}
	return true
}

func (s *GitHubRepositoryStatus) IsUnauthenticated() bool {
	for _, c := range s.Conditions {
		if c.Type == Unauthenticated {
			return c.Status == v1.ConditionTrue || c.Status == v1.ConditionUnknown
		}
	}
	return false
}

func (s *GitHubRepositoryStatus) GetUnauthenticatedCondition() *v1.Condition {
	for _, c := range s.Conditions {
		if c.Type == Unauthenticated {
			lc := c
			return &lc
		}
	}
	return nil
}

func (s *GitHubRepositoryStatus) GetUnauthenticatedReason() string {
	for _, c := range s.Conditions {
		if c.Type == Unauthenticated {
			return c.Reason
		}
	}
	return ""
}

func (s *GitHubRepositoryStatus) GetUnauthenticatedStatus() *v1.ConditionStatus {
	for _, c := range s.Conditions {
		if c.Type == Unauthenticated {
			status := c.Status
			return &status
		}
	}
	return nil
}

func (s *GitHubRepositoryStatus) GetUnauthenticatedMessage() string {
	for _, c := range s.Conditions {
		if c.Type == Unauthenticated {
			return c.Message
		}
	}
	return ""
}

func (s *GitHubRepositoryStatus) SetStaleDueToBranchesOutOfSync(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != BranchesOutOfSync || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = BranchesOutOfSync
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionTrue,
		Reason:  BranchesOutOfSync,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeStaleDueToBranchesOutOfSync(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != BranchesOutOfSync || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = BranchesOutOfSync
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionUnknown,
		Reason:  BranchesOutOfSync,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetStaleDueToDefaultBranchOutOfSync(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != DefaultBranchOutOfSync || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = DefaultBranchOutOfSync
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionTrue,
		Reason:  DefaultBranchOutOfSync,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeStaleDueToDefaultBranchOutOfSync(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != DefaultBranchOutOfSync || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = DefaultBranchOutOfSync
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionUnknown,
		Reason:  DefaultBranchOutOfSync,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetStaleDueToGitHubAPIFailure(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != GitHubAPIFailure || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = GitHubAPIFailure
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionTrue,
		Reason:  GitHubAPIFailure,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeStaleDueToGitHubAPIFailure(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != GitHubAPIFailure || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = GitHubAPIFailure
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionUnknown,
		Reason:  GitHubAPIFailure,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetStaleDueToInternalError(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != InternalError || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = InternalError
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionTrue,
		Reason:  InternalError,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeStaleDueToInternalError(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != InternalError || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = InternalError
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionUnknown,
		Reason:  InternalError,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetStaleDueToInvalid(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != Invalid || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = Invalid
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionTrue,
		Reason:  Invalid,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeStaleDueToInvalid(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != Invalid || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = Invalid
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionUnknown,
		Reason:  Invalid,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetStaleDueToRepositoryNotFound(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != RepositoryNotFound || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = RepositoryNotFound
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionTrue,
		Reason:  RepositoryNotFound,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeStaleDueToRepositoryNotFound(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != RepositoryNotFound || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = RepositoryNotFound
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionUnknown,
		Reason:  RepositoryNotFound,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetStaleDueToUnauthenticated(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != Unauthenticated || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = Unauthenticated
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionTrue,
		Reason:  Unauthenticated,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeStaleDueToUnauthenticated(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Stale {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != Unauthenticated || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = Unauthenticated
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Stale,
		Status:  v1.ConditionUnknown,
		Reason:  Unauthenticated,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetCurrentIfStaleDueToAnyOf(reasons ...string) bool {
	changed := false
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Stale || !slices.Contains(reasons, c.Reason) {
			newConditions = append(newConditions, c)
		} else {
			changed = true
		}
	}
	if changed {
		s.Conditions = newConditions
	}
	return changed
}

func (s *GitHubRepositoryStatus) SetCurrent() {
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Stale {
			newConditions = append(newConditions, c)
		}
	}
	s.Conditions = newConditions
}

func (s *GitHubRepositoryStatus) IsCurrent() bool {
	for _, c := range s.Conditions {
		if c.Type == Stale {
			return c.Status != v1.ConditionTrue
		}
	}
	return true
}

func (s *GitHubRepositoryStatus) IsStale() bool {
	for _, c := range s.Conditions {
		if c.Type == Stale {
			return c.Status == v1.ConditionTrue || c.Status == v1.ConditionUnknown
		}
	}
	return false
}

func (s *GitHubRepositoryStatus) GetStaleCondition() *v1.Condition {
	for _, c := range s.Conditions {
		if c.Type == Stale {
			lc := c
			return &lc
		}
	}
	return nil
}

func (s *GitHubRepositoryStatus) GetStaleReason() string {
	for _, c := range s.Conditions {
		if c.Type == Stale {
			return c.Reason
		}
	}
	return ""
}

func (s *GitHubRepositoryStatus) GetStaleStatus() *v1.ConditionStatus {
	for _, c := range s.Conditions {
		if c.Type == Stale {
			status := c.Status
			return &status
		}
	}
	return nil
}

func (s *GitHubRepositoryStatus) GetStaleMessage() string {
	for _, c := range s.Conditions {
		if c.Type == Stale {
			return c.Message
		}
	}
	return ""
}

func (s *GitHubRepositoryStatus) SetFinalizingDueToFinalizationFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != FinalizationFailed || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = FinalizationFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionTrue,
		Reason:  FinalizationFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeFinalizingDueToFinalizationFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != FinalizationFailed || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = FinalizationFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionUnknown,
		Reason:  FinalizationFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetFinalizingDueToFinalizerRemovalFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != FinalizerRemovalFailed || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = FinalizerRemovalFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionTrue,
		Reason:  FinalizerRemovalFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeFinalizingDueToFinalizerRemovalFailed(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != FinalizerRemovalFailed || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = FinalizerRemovalFailed
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionUnknown,
		Reason:  FinalizerRemovalFailed,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetFinalizingDueToInProgress(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != InProgress || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = InProgress
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionTrue,
		Reason:  InProgress,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeFinalizingDueToInProgress(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Finalizing {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != InProgress || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = InProgress
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Finalizing,
		Status:  v1.ConditionUnknown,
		Reason:  InProgress,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetFinalizedIfFinalizingDueToAnyOf(reasons ...string) bool {
	changed := false
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Finalizing || !slices.Contains(reasons, c.Reason) {
			newConditions = append(newConditions, c)
		} else {
			changed = true
		}
	}
	if changed {
		s.Conditions = newConditions
	}
	return changed
}

func (s *GitHubRepositoryStatus) SetFinalized() {
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Finalizing {
			newConditions = append(newConditions, c)
		}
	}
	s.Conditions = newConditions
}

func (s *GitHubRepositoryStatus) IsFinalized() bool {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			return c.Status != v1.ConditionTrue
		}
	}
	return true
}

func (s *GitHubRepositoryStatus) IsFinalizing() bool {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			return c.Status == v1.ConditionTrue || c.Status == v1.ConditionUnknown
		}
	}
	return false
}

func (s *GitHubRepositoryStatus) GetFinalizingCondition() *v1.Condition {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			lc := c
			return &lc
		}
	}
	return nil
}

func (s *GitHubRepositoryStatus) GetFinalizingReason() string {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			return c.Reason
		}
	}
	return ""
}

func (s *GitHubRepositoryStatus) GetFinalizingStatus() *v1.ConditionStatus {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			status := c.Status
			return &status
		}
	}
	return nil
}

func (s *GitHubRepositoryStatus) GetFinalizingMessage() string {
	for _, c := range s.Conditions {
		if c.Type == Finalizing {
			return c.Message
		}
	}
	return ""
}

func (s *GitHubRepositoryStatus) SetFailedToInitializeDueToInternalError(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != InternalError || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = InternalError
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    FailedToInitialize,
		Status:  v1.ConditionTrue,
		Reason:  InternalError,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeFailedToInitializeDueToInternalError(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != InternalError || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = InternalError
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    FailedToInitialize,
		Status:  v1.ConditionUnknown,
		Reason:  InternalError,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetInitializedIfFailedToInitializeDueToAnyOf(reasons ...string) bool {
	changed := false
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != FailedToInitialize || !slices.Contains(reasons, c.Reason) {
			newConditions = append(newConditions, c)
		} else {
			changed = true
		}
	}
	if changed {
		s.Conditions = newConditions
	}
	return changed
}

func (s *GitHubRepositoryStatus) SetInitialized() {
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != FailedToInitialize {
			newConditions = append(newConditions, c)
		}
	}
	s.Conditions = newConditions
}

func (s *GitHubRepositoryStatus) IsInitialized() bool {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			return c.Status != v1.ConditionTrue
		}
	}
	return true
}

func (s *GitHubRepositoryStatus) IsFailedToInitialize() bool {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			return c.Status == v1.ConditionTrue || c.Status == v1.ConditionUnknown
		}
	}
	return false
}

func (s *GitHubRepositoryStatus) GetFailedToInitializeCondition() *v1.Condition {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			lc := c
			return &lc
		}
	}
	return nil
}

func (s *GitHubRepositoryStatus) GetFailedToInitializeReason() string {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			return c.Reason
		}
	}
	return ""
}

func (s *GitHubRepositoryStatus) GetFailedToInitializeStatus() *v1.ConditionStatus {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			status := c.Status
			return &status
		}
	}
	return nil
}

func (s *GitHubRepositoryStatus) GetFailedToInitializeMessage() string {
	for _, c := range s.Conditions {
		if c.Type == FailedToInitialize {
			return c.Message
		}
	}
	return ""
}

func (s *GitHubRepositoryStatus) SetInvalidDueToAuthConfigMissing(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != AuthConfigMissing || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = AuthConfigMissing
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionTrue,
		Reason:  AuthConfigMissing,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeInvalidDueToAuthConfigMissing(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != AuthConfigMissing || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = AuthConfigMissing
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionUnknown,
		Reason:  AuthConfigMissing,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetInvalidDueToAuthSecretKeyMissing(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != AuthSecretKeyMissing || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = AuthSecretKeyMissing
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionTrue,
		Reason:  AuthSecretKeyMissing,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeInvalidDueToAuthSecretKeyMissing(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != AuthSecretKeyMissing || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = AuthSecretKeyMissing
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionUnknown,
		Reason:  AuthSecretKeyMissing,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetInvalidDueToAuthSecretNameMissing(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != AuthSecretNameMissing || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = AuthSecretNameMissing
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionTrue,
		Reason:  AuthSecretNameMissing,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeInvalidDueToAuthSecretNameMissing(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != AuthSecretNameMissing || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = AuthSecretNameMissing
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionUnknown,
		Reason:  AuthSecretNameMissing,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetInvalidDueToInvalidRefreshInterval(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != InvalidRefreshInterval || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = InvalidRefreshInterval
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionTrue,
		Reason:  InvalidRefreshInterval,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeInvalidDueToInvalidRefreshInterval(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != InvalidRefreshInterval || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = InvalidRefreshInterval
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionUnknown,
		Reason:  InvalidRefreshInterval,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetInvalidDueToRepositoryNameMissing(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != RepositoryNameMissing || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = RepositoryNameMissing
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionTrue,
		Reason:  RepositoryNameMissing,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeInvalidDueToRepositoryNameMissing(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != RepositoryNameMissing || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = RepositoryNameMissing
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionUnknown,
		Reason:  RepositoryNameMissing,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetInvalidDueToRepositoryOwnerMissing(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionTrue || c.Reason != RepositoryOwnerMissing || c.Message != msg {
				c.Status = v1.ConditionTrue
				c.Reason = RepositoryOwnerMissing
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionTrue,
		Reason:  RepositoryOwnerMissing,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetMaybeInvalidDueToRepositoryOwnerMissing(message string, args ...interface{}) bool {
	for i, c := range s.Conditions {
		if c.Type == Invalid {
			msg := fmt.Sprintf(message, args...)
			if c.Status != v1.ConditionUnknown || c.Reason != RepositoryOwnerMissing || c.Message != msg {
				c.Status = v1.ConditionUnknown
				c.Reason = RepositoryOwnerMissing
				c.Message = msg
				s.Conditions[i] = c
				return true
			} else {
				return false
			}
		}
	}
	s.Conditions = append(s.Conditions, v1.Condition{
		Type:    Invalid,
		Status:  v1.ConditionUnknown,
		Reason:  RepositoryOwnerMissing,
		Message: fmt.Sprintf(message, args...),
	})
	return true
}

func (s *GitHubRepositoryStatus) SetValidIfInvalidDueToAnyOf(reasons ...string) bool {
	changed := false
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Invalid || !slices.Contains(reasons, c.Reason) {
			newConditions = append(newConditions, c)
		} else {
			changed = true
		}
	}
	if changed {
		s.Conditions = newConditions
	}
	return changed
}

func (s *GitHubRepositoryStatus) SetValid() {
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.Type != Invalid {
			newConditions = append(newConditions, c)
		}
	}
	s.Conditions = newConditions
}

func (s *GitHubRepositoryStatus) IsValid() bool {
	for _, c := range s.Conditions {
		if c.Type == Invalid {
			return c.Status != v1.ConditionTrue
		}
	}
	return true
}

func (s *GitHubRepositoryStatus) IsInvalid() bool {
	for _, c := range s.Conditions {
		if c.Type == Invalid {
			return c.Status == v1.ConditionTrue || c.Status == v1.ConditionUnknown
		}
	}
	return false
}

func (s *GitHubRepositoryStatus) GetInvalidCondition() *v1.Condition {
	for _, c := range s.Conditions {
		if c.Type == Invalid {
			lc := c
			return &lc
		}
	}
	return nil
}

func (s *GitHubRepositoryStatus) GetInvalidReason() string {
	for _, c := range s.Conditions {
		if c.Type == Invalid {
			return c.Reason
		}
	}
	return ""
}

func (s *GitHubRepositoryStatus) GetInvalidStatus() *v1.ConditionStatus {
	for _, c := range s.Conditions {
		if c.Type == Invalid {
			status := c.Status
			return &status
		}
	}
	return nil
}

func (s *GitHubRepositoryStatus) GetInvalidMessage() string {
	for _, c := range s.Conditions {
		if c.Type == Invalid {
			return c.Message
		}
	}
	return ""
}

func (s *GitHubRepositoryStatus) GetConditions() []v1.Condition {
	return s.Conditions
}

func (s *GitHubRepositoryStatus) SetConditions(conditions []v1.Condition) {
	s.Conditions = conditions
}

func (s *GitHubRepositoryStatus) ClearStaleConditions(currentGeneration int64) {
	var newConditions []v1.Condition
	for _, c := range s.Conditions {
		if c.ObservedGeneration >= currentGeneration {
			newConditions = append(newConditions, c)
		}
	}
	s.Conditions = newConditions
}
