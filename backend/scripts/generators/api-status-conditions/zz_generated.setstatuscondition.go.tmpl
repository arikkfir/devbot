package {{.PackageName}}

import (
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

func (o *{{.ObjectType}}) SetStatusCondition{{.ConditionType}}IfDifferent(status v1.ConditionStatus, reason, message string) bool {
	for i, c := range o.Status.Conditions {
		if c.Type == ConditionType{{.ConditionType}} {
			if c.Status != status || c.Reason != reason || c.Message != message {
				c.Status = status
				c.Reason = reason
				c.Message = message
				c.LastTransitionTime = v1.Now()
				c.ObservedGeneration = o.GetGeneration()
				o.Status.Conditions[i] = c
				return true
			}
			return false
		}
	}
	o.Status.Conditions = append(o.Status.Conditions, v1.Condition{
        Type: ConditionType{{.ConditionType}},
        Status: status,
        Reason: reason,
        Message: message,
        LastTransitionTime: v1.Now(),
        ObservedGeneration: o.GetGeneration(),
	})
    return true
}

func (o *{{.ObjectType}}) SetStatusCondition{{.ConditionType}}(status v1.ConditionStatus, reason, message string) {
	for i, c := range o.Status.Conditions {
		if c.Type == ConditionType{{.ConditionType}} {
            c.Status = status
            c.Reason = reason
            c.Message = message
            c.LastTransitionTime = v1.Now()
            c.ObservedGeneration = o.GetGeneration()
            o.Status.Conditions[i] = c
            return
		}
	}
	o.Status.Conditions = append(o.Status.Conditions, v1.Condition{
        Type: ConditionType{{.ConditionType}},
        Status: status,
        Reason: reason,
        Message: message,
        LastTransitionTime: v1.Now(),
        ObservedGeneration: o.GetGeneration(),
	})
}

func (o *{{.ObjectType}}) RemoveStatusCondition{{.ConditionType}}() {
    var newConditions []v1.Condition
	for _, c := range o.Status.Conditions {
		if c.Type != ConditionType{{.ConditionType}} {
            newConditions = append(newConditions, c)
		}
	}
	o.Status.Conditions = newConditions
}

func (o *{{.ObjectType}}) GetStatusCondition{{.ConditionType}}() *v1.Condition {
	for _, c := range o.Status.Conditions {
		if c.Type == ConditionType{{.ConditionType}} {
			return &c
		}
	}
    return nil
}
